const Equipment = require("../models/Equipment");
const TypeEquipment = require("../models/TypeEquipment");
const Client = require("../models/Client");
const Personnel = require("../models/Personnel"); // ‚úÖ Ajout pour notification aux admins
const { sendEmail } = require("../services/emailService");

// ‚úÖ Cr√©er un √©quipement (par un client, technicien, admin ou super-admin)
const createEquipment = async (req, res) => {
  try {
    const { EQPT_CLNT_code, EQPT_CLNT_adresse, EQPT_marque, EQPT_libelle, EQPT_num_serie, EQPT_type, 
            EQPT_premiere_date_installation, EQPT_derniere_date_Maintenance, EQPT_date_debut_validite, 
            EQPT_date_fin_validite } = req.body;

    // üîé V√©rifier le code client re√ßu
    console.log("üîé Code client re√ßu :", EQPT_CLNT_code);
    const client = await Client.findOne({ CLNT_code: EQPT_CLNT_code });
    
    
    if (!client) {
      console.log("‚ùå Client introuvable dans la base !");
      return res.status(404).json({ message: "Client non trouv√©" });
    }
    
    console.log("‚úÖ Client trouv√© :", client);


    // üîç V√©rifier si le type d'√©quipement existe
    console.log("üîé Type d'√©quipement re√ßu :", EQPT_type);
    const typeExists = await TypeEquipment.findOne({ TPEQ_code: EQPT_type });
    
    if (!typeExists) {
      console.log("‚ùå Type d'√©quipement introuvable !");
      return res.status(400).json({ message: "Le type d'√©quipement sp√©cifi√© n'existe pas." });
    }
    
    console.log("‚úÖ Type d'√©quipement trouv√© :", typeExists);



    // üîç V√©rifier si le num√©ro de s√©rie est unique
    const existingEquipment = await Equipment.findOne({ EQPT_num_serie });
    if (existingEquipment) {
      console.log("‚ùå Num√©ro de s√©rie d√©j√† utilis√© !");
      return res.status(400).json({ message: "Un √©quipement avec ce num√©ro de s√©rie existe d√©j√†." });
    }

    // ‚úÖ Cr√©er l'√©quipement
    const newEquipment = new Equipment({
      EQPT_CLNT_code,
      EQPT_CLNT_adresse,
      EQPT_marque,
      EQPT_libelle,
      EQPT_num_serie,
      EQPT_type,
      EQPT_premiere_date_installation,
      EQPT_derniere_date_Maintenance,
      EQPT_date_debut_validite,
      EQPT_date_fin_validite
    });

    await newEquipment.save();
    console.log("‚úÖ √âquipement enregistr√© :", newEquipment);

    res.status(201).json({ message: "√âquipement cr√©√© avec succ√®s", newEquipment });

  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de l'√©quipement :", error);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// ‚úÖ R√©cup√©rer tous les √©quipements
const getEquipments = async (req, res) => {
  try {
    const equipments = await Equipment.find().populate("EQPT_type", "TPEQ_libelle");
    res.status(200).json(equipments);
  } catch (error) {
    res.status(500).json({ message: "Erreur serveur", error });
  }
};


const getEquipmentsByClient = async (req, res) => {
  try {
    const clientId = req.user.id;

    // Trouver tous les √©quipements du client et ne retourner que `EQPT_code`
    const equipments = await Equipment.find({ EQPT_CLNT_code: clientId })
      .select("EQPT_code EQPT_libelle EQPT_marque EQPT_type");

    if (!equipments.length) {
      return res.status(404).json({ message: "Aucun √©quipement trouv√© pour ce client." });
    }

    res.status(200).json(equipments);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des √©quipements :", error);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};




// ‚úÖ Mettre √† jour un √©quipement (UNIQUEMENT ADMIN et SUPER_ADMIN)
const updateEquipment = async (req, res) => {
  try {
    const { id } = req.params;

    // V√©rifier si l'√©quipement existe
    let equipment = await Equipment.findById(id);
    if (!equipment) {
      return res.status(404).json({ message: "√âquipement non trouv√©" });
    }

    // V√©rifier si un nouveau type d'√©quipement est sp√©cifi√©
    if (req.body.EQPT_type) {
      const typeExists = await TypeEquipment.findOne({ TPEQ_code: req.body.EQPT_type });
      if (!typeExists) {
        return res.status(400).json({ message: "Le type d'√©quipement sp√©cifi√© n'existe pas." });
      }
    }

    Object.assign(equipment, req.body);
    await equipment.save();

    // ‚úÖ Notification par email aux admins
    const admins = await Personnel.find({ PERS_role_acces: { $in: ["ADMIN", "SUPER_ADMIN"] } });
    admins.forEach(async (admin) => {
      await sendEmail(admin.PERS_email, "√âquipement mis √† jour", 
        `L'√©quipement ${equipment.EQPT_libelle} a √©t√© mis √† jour.`);
    });

    res.status(200).json({ message: "√âquipement mis √† jour avec succ√®s", equipment });
  } catch (error) {
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// ‚úÖ Supprimer un √©quipement (UNIQUEMENT ADMIN et SUPER_ADMIN)
const deleteEquipment = async (req, res) => {
  try {
    const { id } = req.params;

    // V√©rifier si l'√©quipement existe
    const equipment = await Equipment.findById(id);
    if (!equipment) {
      return res.status(404).json({ message: "√âquipement non trouv√©" });
    }

    await Equipment.findByIdAndDelete(id);

    // ‚úÖ Notification par email aux admins
    const admins = await Personnel.find({ PERS_role_acces: { $in: ["ADMIN", "SUPER_ADMIN"] } });
    admins.forEach(async (admin) => {
      await sendEmail(admin.PERS_email, "√âquipement supprim√©", 
        `L'√©quipement ${equipment.EQPT_libelle} a √©t√© supprim√©.`);
    });

    res.status(200).json({ message: "√âquipement supprim√© avec succ√®s" });
  } catch (error) {
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

module.exports = { 
  createEquipment, 
  getEquipments, 
  getEquipmentsByClient, 
  updateEquipment, 
  deleteEquipment 
};

