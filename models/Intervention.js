const mongoose = require("mongoose");
const { generateUniqueCode } = require("../utils/generateUniqueCode");

const interventionSchema = new mongoose.Schema({
  INTR_code: { type: String, unique: true }, // âœ… Code unique
  INTR_ticket: { type: mongoose.Schema.Types.ObjectId, ref: "Ticket", required: true },
  INTR_techniciens: [{ type: mongoose.Schema.Types.ObjectId, ref: "Technicien", required: true }], // âœ… Plusieurs techniciens peuvent intervenir
  INTR_description_panne: { type: String, required: true },
  INTR_cause_panne: { type: String }, // âœ… Cause identifiÃ©e
  INTR_solution_apportÃ©e: { type: String }, // âœ… Solution appliquÃ©e
  INTR_statut: { type: String, enum: ["en attente", "en cours", "terminÃ©"], default: "en attente" }, // âœ… Ajout de "en attente"
  INTR_durÃ©e: { type: Number, default: 0 }, // âœ… DurÃ©e en minutes
  INTR_dt_debut: { type: Date }, // âœ… DÃ©but de l'intervention
  INTR_dt_fin: { type: Date }, // âœ… Fin de l'intervention
  Date_creation: { type: Date, default: Date.now } // âœ… Date de crÃ©ation
});

// ðŸ”¹ GÃ©nÃ©ration automatique du code unique avant l'enregistrement
interventionSchema.pre("save", async function (next) {
  if (!this.INTR_code) {
    this.INTR_code = await generateUniqueCode("Intervention", "INTR");
  }
  next();
});

module.exports = mongoose.model("Intervention", interventionSchema);


